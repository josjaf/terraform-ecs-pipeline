image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/application
  PLAN: ${CI_PROJECT_DIR}/application/plan.tfplan
  DEV_NAMESPACE: terraform-ecs
  TFOUTPUT: ${CI_PROJECT_DIR}/application/output.json
  #DOCKER_HOST: tcp://docker:2375/


cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/plugins
    - ${TF_ROOT}/.terraform/providers


before_script:
  #- rm -rf .terraform
  - echo $AWS_ACCESS_KEY_ID
  - terraform --version
  - cd application
  - terraform init -backend-config=conf/beta-init.tfvars --reconfigure


stages:
  - validate
  - plan
  - apply
  - ecr

validate:
  stage: validate
  script:

    - terraform validate

plan:
  stage: plan
  script:

    - terraform plan -var-file conf/beta.tfvars -out=$PLAN
  dependencies:
    - validate
  artifacts:
    name: plan
    paths:
      - $PLAN

apply:
  stage: apply
  script:
    - terraform apply -input=false $PLAN
    - terraform output -json > $TFOUTPUT
  dependencies:
    - plan
  artifacts:
    paths:
      - $TFOUTPUT
    expire_in: 1 week
  #when: manual

ecr:
  stage: ecr
  image: docker:19.03.12
  #image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest
  services:
    - docker:19.03.12-dind
  before_script:
    - apk add --no-cache curl jq wget unzip python3 py-pip
    - pip install awscli
    - aws --version
    - docker --version
    - cd application
  script:
    - echo getting REPOSITORY_URI from AWS SSM
    - REPOSITORY_URI=$(aws ssm get-parameter --name "/${DEV_NAMESPACE}/ecr/uri" --query Parameter.Value --output text)
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
    - docker build -t $REPOSITORY_URI:2048 .
    - docker tag $REPOSITORY_URI:2048 $REPOSITORY_URI:$CI_COMMIT_SHORT_SHA
    - docker push $REPOSITORY_URI:2048
    - docker push $REPOSITORY_URI:$CI_COMMIT_SHORT_SHA
    - export CLUSTER=$(cat $TFOUTPUT | jq -r .cluster.value)
    - export SERVICE=$(cat $TFOUTPUT | jq -r .service.value)
    - aws ecs update-service --cluster $CLUSTER--service $SERVICE

    #- aws ecs update-service --cluster $(terraform output -json | jq -r .cluster.value) --service $(terraform output -json | jq -r .service.value)
  dependencies:
    - apply